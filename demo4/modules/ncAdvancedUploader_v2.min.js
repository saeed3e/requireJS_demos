define(['jquery'], function() {
    var ncUploader = function(e) {
        var g;
        var b;
        var c = [];
        var i = function(j) {
            j.params = e;
            b = e.maxNumOfFiles || 0;
            c = e.fileKeys;
            if (d()) {
                ncAdvancedUploder.prototype = j;
                g = new ncAdvancedUploder()
            } else {
                b = j.params.maxNumOfFiles = 1;
                ncBasicUploader.prototype = j;
                g = new ncBasicUploader()
            }
            $("#" + j.params.fileId).on("change", g.upload);
            if ($.isEmptyObject(j.params.plugins) === false) {
                a(e, g.pluginCallback, g.isUploadAllowed, g.getFileKey)
            }
            return g
        };
        var d = function() {
            return (e.forceBasicUploader !== true && typeof File != "undefined" && typeof FileList != "undefined")
        };
        var a = function(n, j, m, k) {
            for (var l in n.plugins) {
                pluginHandler(l, n, j, m, k)
            }
        };
        var h = function(k, n) {
            var m = {
                appId: e.appId,
                formKey: e.formKey,
                fileKey: k
            };
            var l = e.targets.deleteUrl;
            var j;
            $.post(l, m, function() {}, "json").done(function(o, q, p) {
                if (typeof o[k].ERROR !== "undefined") {
                    callbackArguments = {
                        ERROR: {}
                    };
                    callbackArguments.ERROR[k] = {
                        name: n,
                        error: "DELETE_ERROR " + o[k].ERROR
                    };
                    e.callback.call(window, callbackArguments)
                }
            })
        };
        this.pluginCallback = function(m, k) {
            var j = {};
            if (m === "success") {
                f("dec");
                var l = [];
                j = {
                    SUCCESS: []
                };
                if (k) {
                    j.SUCCESS = k;
                    e.callback.call(window, j)
                }
            } else {
                if (m === "error") {
                    j = {
                        ERROR: []
                    };
                    if (k) {
                        j.ERROR = k;
                        e.callback.call(window, j)
                    }
                } else {
                    if (m === "limitExceed") {
                        j = {
                            ERROR: "MAX LIMIT REACHED"
                        };
                        e.callback.call(window, j)
                    } else {
                        if (m === "selectionExceeded") {
                            j = {
                                ERROR: "SELECTION EXCEEDED"
                            };
                            e.callback.call(window, j)
                        } else {
                            if (m === "remove") {
                                this.deleteFile(k.fileKey, k.name)
                            }
                        }
                    }
                }
            }
        };
        this.deleteFile = function(j, k, l) {
            f("inc", l);
            c.push(j);
            h(j, k)
        };
        var f = function(k, l) {
            l = l || false;
            if (k == "inc") {
                b++;
                if (b === 1 && !l) {
                    for (var j in e.plugins) {
                        $("#" + e.plugins[j].buttonId).show()
                    }
                    $("#" + e.fileId).show()
                }
                if (b === e.maxNumOfFiles) {
                    $("#" + e.outputHolder.id).hide()
                }
            }
            if (k == "dec") {
                b--;
                if (b === 0) {
                    if (document.ajaxq) {
                        document.ajaxq.q.uploadqueue = []
                    }
                    for (var j in e.plugins) {
                        $("#" + e.plugins[j].buttonId).hide()
                    }
                    $("#" + e.dropAreaParams.id).hide();
                    $("#" + e.fileId).hide()
                }
            }
        };
        this.isUploadAllowed = function() {
            if (b <= 0) {
                return false
            }
        };
        this.getFileKey = function() {
            return c.pop()
        };
        return i(this)
    };
    var ncUploaderUtil = {
        getRandomString: function() {
            return (new Date().getTime()) + "_" + ((Math.random() + "").replace(".", "_"))
        },
        cancel: function() {
            if (document.ajaxq.r) {
                document.ajaxq.r.abort()
            }
        }
    };
    var ncBasicUploader = function() {
        var construct = function(me2) {
            me = me2;
            file = getCurrentFile();
            $("#" + me.params.containerId).show();
            return me
        };
        var getCurrentFile = function() {
            return $("#" + me.params.fileId)[0]
        };
        this.upload = function() {
            file = getCurrentFile();
            if (!file.value) {
                return
            }
            var validationDetails = validateBeforeUpload();
            if (!validationDetails.isValid) {
                me.params.callback.call(window, validationDetails.callbackArguments);
                return
            }
            showProgressBar();
            var uploadFormId = createUploadForm();
            var uploadIframeName = createUploadIframe();
            submitUploadIframe(uploadFormId, uploadIframeName)
        };
        var validateBeforeUpload = function() {
            var isValid = true;
            var callbackArguments = {};
            callbackArguments = {
                ERROR: []
            };
            var isExtensionValid = false;
            var extension = file.value.slice(file.value.lastIndexOf(".") + 1).toLowerCase();
            if (extension != file.value) {
                for (var i = 0; i < me.params.extensions.length; ++i) {
                    if (extension == me.params.extensions[i]) {
                        isExtensionValid = true;
                        break
                    }
                }
            }
            if (!isExtensionValid) {
                isValid = false;
                callbackArguments.ERROR = {
                    dummyFileKey: {
                        error: "INVALID_EXTENSION"
                    }
                }
            }
            return {
                isValid: isValid,
                callbackArguments: callbackArguments
            }
        };
        var showProgressBar = function() {
            $("#" + me.params.basicProgressBarId).show()
        };
        var createUploadFormCallbackUrl = function() {
            return $("<input>").attr({
                type: "hidden",
                name: "uploadCallbackUrl",
                value: (location.origin || location.protocol + "//" + location.host) + me.params.callbackUrl
            })[0]
        };
        var createUploadFormCallback = function() {
            var callbackName = "uploadCallback_" + ncUploaderUtil.getRandomString();
            (function(me2) {
                eval("window." + callbackName + ' = function() {                 document.getElementById(me2.params.basicProgressBarId).style.display = "none";                 if (typeof me2.params.callback != "undefined") {                     me2.params.callback.apply(window, arguments);                 }             }')
            })(me);
            return $("<input>").attr({
                type: "hidden",
                name: "uploadCallback",
                value: callbackName
            })[0]
        };
        var createUploadForm = function() {
            var formId = "form_" + ncUploaderUtil.getRandomString();
            var form = $("<form>").attr({
                id: formId,
                method: "POST",
                enctype: "multipart/form-data",
                action: me.params.targets.saveFileUrl
            });
            var fileObj = $("#" + me.params.fileId);
            $(fileObj.clone(true)).insertBefore(fileObj.next());
            fileObj.off("change");
            fileObj.hide();
            var appIdEle = $("<input>").attr({
                type: "hidden",
                name: "appId",
                value: me.params.appId
            });
            (form.append(fileObj).append(appIdEle).append(createUploadFormCallbackUrl()).append(createUploadFormCallback())).appendTo("body");
            return formId
        };
        var createUploadIframe = function() {
            var iframeName = "iframe_" + ncUploaderUtil.getRandomString();
            $('<iframe name="' + iframeName + '">').attr({
                style: "position: absolute; top: -1000px; left: -1000px"
            }).appendTo("body");
            return iframeName
        };
        var submitUploadIframe = function(formId, iframeName) {
            $("#" + formId).attr("target", iframeName).submit()
        };
        var me, file;
        return construct(this)
    };
    var ncAdvancedUploder = function() {
        var e, d;
        var a = function(h) {
            e = h;
            $("#" + e.params.containerId).show();
            if (e.params.dropAreaParams && e.params.dropAreaParams.id) {
                c($("#" + e.params.dropAreaParams.id))
            }
            return e
        };
        var c = function(h) {
            h.on("drop", function(i) {
                i.preventDefault();
                e.params.files = i.originalEvent.dataTransfer.files;
                e.upload()
            });
            h.on("dragover", function() {
                h.addClass(e.params.dropAreaParams.onHoverCssClass);
                return false
            });
            h.on("dragleave", function() {
                h.removeClass(e.params.dropAreaParams.onHoverCssClass);
                return false
            });
            h.show()
        };
        var g = function(i) {
            var h = function(j) {
                if (j.lengthComputable) {
                    i.attr({
                        value: j.loaded,
                        max: j.total
                    })
                }
            };
            return h
        };
        this.upload = function() {
            if (e.isUploadAllowed() == false) {
                e.pluginCallback("limitExceed");
                return
            }
            if (typeof e.params.files == "undefined") {
                d = $("#" + e.params.fileId)[0].files
            } else {
                d = e.params.files
            }
            if (!d.length) {
                return
            } else {
                if (d.length > e.params.maxNumOfFiles) {
                    e.pluginCallback("selectionExceeded");
                    return
                }
            }
            var k = {
                appId: e.params.appId,
                uploadCallback: e.params.callback
            };
            for (var h = 0; h < d.length; ++h) {
                var j = b(d[h]);
                if (!j.isValid) {
                    e.params.callback.call(window, j.callbackArguments)
                } else {
                    $("#" + e.params.outputHolder.id).show();
                    f(k, d[h])
                }
            }
        };
        var b = function(l) {
            var n = true;
            var h = false;
            var j = {};
            j = {};
            var m = e.params.extensions;
            var o = l.name.slice(l.name.lastIndexOf(".") + 1).toLowerCase();
            if (o != l.value) {
                for (var k = 0; k < m.length; ++k) {
                    if (o == m[k]) {
                        h = true;
                        break
                    }
                }
            }
            if (!h) {
                n = false;
                j.ERROR = {
                    dummyFileKey: {
                        name: l.name,
                        error: "INVALID_EXTENSION"
                    }
                }
            }
            if (l.size > e.params.maxSize) {
                n = false;
                j.ERROR = {
                    dummyFileKey: {
                        name: l.name,
                        error: "FILE SIZE LIMIT EXCEEDED"
                    }
                }
            }
            return {
                isValid: n,
                callbackArguments: j
            }
        };
        var f = function(k, i) {
            var l = new FormData();
            var j;
            var h = ncUploaderUtil.getRandomString();
            for (name in k) {
                l.append(name, k[name])
            }
            $.ajaxq("uploadqueue", {
                type: "POST",
                url: e.params.targets.saveFileUrl,
                enctype: "multipart/form-data",
                data: l,
                processData: false,
                contentType: false,
                dataType: "json",
                beforeSend: function() {
                    var m = $("<li>").attr({
                        id: h
                    }).html("<div>" + i.name + "</div>").append($("<progress>")).append($("<button>").on("click", function() {
                        ncUploaderUtil.cancel();
                        $("#" + h).remove()
                    }));
                    if (e.params.outputHolder) {
                        $("#" + e.params.outputHolder.id).append(m)
                    }
                    j = e.getFileKey();
                    l.append(e.params.formKey + "[" + j + "]", i)
                },
                error: function(m, o, n) {
                    e.pluginCallback("error", {
                        dummyFileKey: {
                            name: i.name,
                            error: n
                        }
                    })
                },
                success: function(p, q, o) {
                    var n = {};
                    for (var m in p) {
                        if (typeof p[m].ERROR !== "undefined") {
                            n[m] = {
                                name: i.name,
                                error: p[m].ERROR
                            };
                            e.pluginCallback("error", n);
                            $("#" + h).remove()
                        } else {
                            n[m] = {
                                name: i.name,
                                URL: p[m].URL
                            };
                            e.pluginCallback("success", n);
                            $("#" + h + ">button").unbind("click").bind("click", function() {
                                e.pluginCallback("remove", {
                                    fileKey: m,
                                    name: i.name
                                });
                                $("#" + h).remove();
                                e.params.onDelete ? e.params.onDelete() : ""
                            })
                        }
                    }
                },
                xhr: function() {
                    var m = $.ajaxSettings.xhr();
                    if (m.upload) {
                        m.upload.addEventListener("progress", g($("#" + h + ">progress")), false)
                    }
                    return m
                },
                complete: function() {
                    $("#" + h + ">progress").hide()
                }
            })
        };
        return a(this)
    };
    var pluginHandler = function(c, e, f, d, b) {
        var a = function(g) {
            g.params = e;
            g.isUploadAllowed = d;
            var h = window[c](e.plugins[c]);
            return g
        };
        this.serverHit = function(i) {
            var h = ncUploaderUtil.getRandomString();
            var j;
            if (!i.fileLink) {
                return
            }
            var g = {
                appId: e.appId,
                uploadCallback: e.callback.toString(),
                formKey: e.formKey,
                filename: i.fileName,
                url: i.fileLink
            };
            $("#" + e.outputHolder.id).show();
            if (!(typeof i.fileToken === "undefined")) {
                g.access_token = i.fileToken
            }
            $.ajaxq("uploadqueue", {
                type: "POST",
                url: e.targets.saveCloudUrl,
                data: g,
                dataType: "json",
                beforeSend: function(l, m) {
                    var k = $("<li>").attr({
                        id: h
                    }).html("<div>" + i.fileName + "</div>").append($("#" + e.basicProgressBarId).clone().show()).append($("<button>").on("click", function() {
                        ncUploaderUtil.cancel();
                        $("#" + h).remove()
                    }));
                    if (e.outputHolder) {
                        $("#" + e.outputHolder.id).append(k)
                    }
                    j = b();
                    m.data = m.data + "&fileKey=" + j
                },
                success: function(n, o, m) {
                    var l = {};
                    for (var k in n) {
                        if (typeof n[k].ERROR !== "undefined") {
                            l[k] = {
                                name: i.fileName,
                                error: n[k].ERROR
                            };
                            f("error", l);
                            $("#" + h).remove()
                        } else {
                            l[k] = {
                                name: i.fileName,
                                URL: n[k].URL
                            };
                            f("success", l);
                            $("#" + h + ">button").unbind("click").bind("click", function() {
                                f("remove", {
                                    fileKey: k,
                                    name: i.fileName
                                });
                                $("#" + h).remove();
                                me.params.onDelete ? me.params.onDelete() : ""
                            })
                        }
                    }
                },
                error: function(k, m, l) {
                    f("error", {
                        dummyFileKey: {
                            name: i.fileName,
                            error: l
                        }
                    })
                },
                complete: function() {
                    $("#" + h + ">img").hide()
                }
            })
        };
        this.validateBeforeUpload = function(l, h) {
            var n = true;
            var g = false;
            var j = {};
            j = {};
            var m = e.extensions;
            var o = l.slice(l.lastIndexOf(".") + 1).toLowerCase();
            for (var k = 0; k < m.length; ++k) {
                if (o == m[k]) {
                    g = true;
                    break
                }
            }
            if (!g) {
                n = false;
                j.ERROR = {
                    dummyFileKey: {
                        name: l,
                        error: "INVALID_EXTENSION"
                    }
                }
            }
            if (typeof h != "undefined") {
                if (h > e.maxSize) {
                    n = false;
                    j.ERROR = {
                        dummyFileKey: {
                            name: l,
                            error: "FILE SIZE LIMIT EXCEEDED"
                        }
                    }
                }
            }
            return {
                isValid: n,
                callbackArguments: j
            }
        };
        return a(this)
    };
    jQuery.ajaxq = function(a, c) {
        if (typeof document.ajaxq == "undefined") {
            document.ajaxq = {
                q: {},
                r: null
            }
        }
        if (typeof document.ajaxq.q[a] == "undefined") {
            document.ajaxq.q[a] = []
        }
        if (typeof c != "undefined") {
            var b = {};
            for (var e in c) {
                b[e] = c[e]
            }
            c = b;
            var d = c.complete;
            c.complete = function(g, f) {
                document.ajaxq.q[a].shift();
                document.ajaxq.r = null;
                if (d) {
                    d(g, f)
                }
                if (document.ajaxq.q[a].length > 0) {
                    document.ajaxq.r = jQuery.ajax(document.ajaxq.q[a][0])
                }
            };
            document.ajaxq.q[a].push(c);
            if (document.ajaxq.q[a].length == 1) {
                document.ajaxq.r = jQuery.ajax(c)
            }
        } else {
            if (document.ajaxq.r) {
                document.ajaxq.r.abort();
                document.ajaxq.r = null
            }
            document.ajaxq.q[a] = []
        }
    };
});
