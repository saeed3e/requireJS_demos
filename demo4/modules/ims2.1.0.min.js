define(['jquery'], function() {
    var ims = function() {
        var e = {
            init: function(t) {
                var r = e,
                    n = t.trigger && t.trigger.selector ? t.trigger.selector : null,
                    o = t.trigger && t.trigger.on ? t.trigger.on : "click",
                    s = t.trigger && t.trigger.loader ? t.trigger.loader : null,
                    i = t.embedTo || null,
                    a = t.url || null,
                    l = (t.iName || null, t.postData || ""),
                    c = t.requestTimeout || 3e4,
                    d = t.requestSuccess || function() {},
                    u = t.requestFail || function() {},
                    p = t.crossDomain || null,
                    f = t.autoInvoke || null,
                    g = {
                        url: a,
                        pD: l,
                        rT: c,
                        rS: d,
                        rF: u,
                        cD: p
                    },
                    m = {
                        count: 0,
                        loaded: 0,
                        failed: 0
                    },
                    h = t.disableClose || null;
                disableCloseByLayer = "boolean" == typeof t.disableCloseByLayer ? t.disableCloseByLayer : !1, disableCloseByEsc = "boolean" == typeof t.disableCloseByEsc ? t.disableCloseByEsc : !1, r.sel = n, r.evt = o, r.loader = s, r.emb = i, r.aD = g, r.jF = m, r.dC = h, r.dCBL = disableCloseByLayer, r.dCBE = disableCloseByEsc, n && r.bindEvents(), f && r.sendRequest()
            },
            showLoader: function(t) {
                var r = e;
                r.loader && ("show" == t ? r.loader.auto ? $(r.loader.auto).gLoader().block() : $(r.loader).show() : r.loader.auto ? $(r.loader.auto).gLoader().unblock() : $(r.loader).hide())
            },
            bindEvents: function() {
                var t = e;
                $(t.sel).on(t.evt, function(e) {
                    t.sendRequest()
                })
            },
            sendRequest: function() {
                var t = e;
                $.ajax({
                    cache: !1,
                    type: t.aD.cD ? "GET" : "POST",
                    dataType: t.aD.cD ? "jsonp" : "",
                    url: t.aD.cD ? t.aD.url + "?" + t.aD.pD : t.aD.url,
                    data: t.aD.pD,
                    timeout: t.aD.rT,
                    beforeSend: function() {
                        t.showLoader("show")
                    },
                    success: function(e) {
                        var r = "string" == typeof e ? $.parseJSON(e) : e;
                        t.procssResponse(r)
                    },
                    error: function(e, r, n) {
                        t.aD.rF && t.aD.rF({
                            XHR: e,
                            STATUS: r,
                            ERROR: n
                        })
                    },
                    complete: function() {
                        t.showLoader("hide")
                    }
                })
            },
            procssResponse: function(t) {
                {
                    var r = e;
                    r.sel.substring(1, r.sel.length)
                }
                if (r.jF = {
                        count: 0,
                        loaded: 0,
                        failed: 0
                    }, t) {
                    if (t.exception) return void(r.aD.rF ? r.aD.rF(t.exception) : alert("Reqest could not be completed. Please try again..."));
                    if (t.data) {
                        var n, o = 0;
                        t.data.files && t.data.files.length > 0 && r.setFiles(t.data.files), n = setInterval(function() {
                            o++, r.jF.count <= r.jF.loaded + r.jF.failed ? (clearInterval(n), r.emb ? r.setContent($(r.emb), t.data) : r.showLightbox(t.data), r.aD.rS && r.aD.rS(t)) : o > 300 && clearInterval(n)
                        }, 100)
                    } else t.redirectURL && (window.location.href = t.redirectURL)
                }
            },
            setFiles: function(t) {
                var r, n = e;
                for (r = 0; r < t.length; r++) n.checkFile(t[r]) || n.injectFile(t[r])
            },
            setContent: function(t, r) {
                var n = e;
                r.html && n.setHtml(t, r.html), r.script && n.setScript(t, r.script)
            },
            setHtml: function(e, t) {
                e.html(t)
            },
            setScript: function(e, t) {
                var r = document.createElement("script");
                r.type = "text/javascript", r.text = t, e.get && e.get(0) ? e.get(0).appendChild(r) : document.body.appendChild(r)
            },
            showLightbox: function(t) {
                var r = e;
                if (ims.lbOpened) setTimeout(function() {
                    t.html && r.setHtml($("#imsLBMain"), t.html), $(ims.lbOpened).lightBox().resize(), t.script && r.setScript($("#imsLBMain"), t.script)
                }, 10);
                else if (t.html) {
                    var n = $('<div id="imsLBMain" class="ltBx lightbox">' + t.html + "</div>");
                    window.options = {
                        ltBox: n,
                        resetForm: !0,
                        dimens: {
                            width: "700px"
                        },
                        open: {
                            success: function() {
                                $(ims.lbOpened).lightBox() && $(ims.lbOpened).lightBox().resize()
                            },
                            event: "click"
                        },
                        close: {}
                    }, r.dC ? options.close = {
                        anim: {
                            className: "flipClose",
                            duration: 300
                        },
                        layer: !r.dCBL,
                        esc: !r.dCBE,
                        success: function() {}
                    } : options.close = {
                        nodes: {
                            target: "#imsLBMain",
                            selector: ".imsLBClose"
                        },
                        anim: {
                            className: "flipClose",
                            duration: 300
                        },
                        layer: !r.dCBL,
                        esc: !r.dCBE,
                        success: function() {
                            ims.lbOpened = !1, $("#imsLBMain").remove(), $(r.sel).lightBox().reInit()
                        }
                    }, ims.lbOpened = r.sel, $(r.sel).lightBox(window.options);
                    var o = setInterval(function() {
                        $(".ltCont").focus()
                    }, 100);
                    $("body").on("focusin", ".ltCont", function() {
                        clearInterval(o), $(r.sel).lightBox().resize(), $("body").append("<script>" + t.script + "</script>"), $("body").off("focusin", ".ltCont"), n.on("click", "#closeLB", function() {
                            $.fn.lightBox.closeAll()
                        })
                    }), $(r.sel).lightBox().open()
                }
            },
            extractVersion: function(e) {
                var t = e.split("_v")[1];
                return t ? t.split(".min")[0].split(".") : !1
            },
            compareVersions: function(e, t) {
                var r = !1,
                    n = this.extractVersion(e),
                    o = this.extractVersion(t);
                if (n && o && -1 != e.indexOf(t.split("_v")[0]))
                    for (var s = n.length, i = 0; s > i; i++) {
                        if (parseInt(o[i]) < parseInt(n[i])) {
                            r = !1;
                            break
                        }
                        if (parseInt(o[i]) > parseInt(n[i])) {
                            r = !0;
                            break
                        }
                    } else r = !0;
                return r
            },
            checkFile: function(t) {
                var r = e,
                    n = r.getFile(t).name,
                    o = r.getFile(t).ext,
                    s = null;
                switch (o) {
                    case "js":
                        for (var i = $("script"), a = 0; a < i.length; a++) {
                            var l = i.eq(a).attr("src");
                            l && !r.compareVersions(l, n) && (s = i.eq(a).attr("status") || !0)
                        }
                        break;
                    case "css":
                        for (var c = $("link"), d = 0; d < c.length; d++) {
                            var u = c.eq(d).attr("href");
                            u && !r.compareVersions(u, n) && (s = c.eq(d).attr("status") || !0)
                        }
                }
                return s
            },
            injectFile: function(t, r) {
                function n() {
                    c && "loading" !== c || (c = "loaded", i.removeAttr("status"), r && r(t, c), l.jF.loaded++)
                }

                function o() {
                    var e;
                    c && "loading" !== c || (e = this.readyState, ("complete" === e || "loaded" === e || 4 === e) && n())
                }

                function s() {
                    c && "loading" !== c || (c = "error", i.remove(), r && r(t, "error"), l.jF.failed++)
                }
                var i, a, l = e,
                    c = !1,
                    d = l.getFile(t).ext;
                switch (d) {
                    case "js":
                        l.jF.count++, i = $("<script>").attr({
                            type: "text/javascript"
                        }), a = i.get(0), a.onload = n, a.onreadystatechange = o, a.onerror = s;
                        break;
                    case "css":
                        i = $("<link>").attr({
                            type: "text/css",
                            rel: "stylesheet"
                        })
                }
                $("head").append(i), "js" == d ? (i.attr({
                    src: t
                }), c = "loading", i.attr("status", c)) : i.attr({
                    href: t
                })
            },
            getFile: function(e) {
                var t = new RegExp(/\.([0-9a-z]+)(?:[\?#]|$)/i),
                    r = e.match(t)[1],
                    n = e.substring(e.lastIndexOf("/") + 1, e.lastIndexOf(r));
                return {
                    name: n + r,
                    ext: r
                }
            }
        };
        return Object.create({
            init: e.init,
            prv: e
        })
    };
    "function" != typeof Object.create && ! function() {
        var e = function() {};
        Object.create = function(t) {
            if (arguments.length > 1) throw Error("Second argument not supported");
            if (null === t) throw Error("Cannot set a null [[Prototype]]");
            if ("object" != typeof t) throw TypeError("Argument must be an object");
            return e.prototype = t, new e
        }
    }();
})
